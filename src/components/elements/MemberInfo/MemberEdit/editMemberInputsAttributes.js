import Validator from '../../../../helpers/Validator';
import Client from '../../../../helpers/Client';
import masks from '../../../../helpers/maskHelpers/masks';
import maskSpecialCharsRegex from '../../../../helpers/maskHelpers/maskSpecialCharsRegex';

export default function editMemberInputsAttributes({
  firstName,
  lastName,
  email,
  skype,
  mobilePhone,
  address,
  sex,
  startDate,
  birthDate,
  direction,
  education,
  universityAverageScore,
  mathScore,
}) {
  return [
    {
      type: 'text',
      name: 'firstName',
      description: 'First Name',
      placeholder: 'First Name',
      value: firstName,
      byCharValidator: Validator.text,
      validator: Validator.text,
      validationMessage: 'First name may contain only letters',
      required: true,
    },
    {
      type: 'text',
      name: 'lastName',
      description: 'Last Name',
      placeholder: 'Last Name',
      value: lastName,
      byCharValidator: Validator.text,
      validationMessage: 'Last name may contain only letters',
      required: true,
    },
    {
      type: 'text',
      name: 'email',
      description: 'Email',
      placeholder: 'Email',
      value: email,
      validator: Validator.email,
      validationMessage: Validator.emailMessage,
      required: true,
    },
    {
      type: 'text',
      name: 'skype',
      description: 'Skype',
      placeholder: 'Skype',
      value: skype,
      required: true,
    },
    {
      type: 'text',
      name: 'mobilePhone',
      description: 'Mobile phone',
      placeholder: masks.phone.replace(maskSpecialCharsRegex, '_'),
      value: mobilePhone,
      mask: masks.phone,
      validationMessage: Validator.mobilePhoneMessage,
      required: true,
    },
    {
      type: 'text',
      name: 'address',
      description: 'Address',
      placeholder: 'Address',
      value: address,
      required: true,
    },
    {
      type: 'radio',
      name: 'sex',
      description: 'Sex',
      value: sex,
      valueOptions: [
        { label: 'Male', value: 'Male' },
        { label: 'Female', value: 'Female' },
      ],
      required: true,
    },
    {
      type: 'text',
      name: 'startDate',
      description: 'Start date',
      placeholder: 'dd-mm-yyyy',
      value: startDate && Validator.fromDateToMask(startDate, masks.date),
      mask: '99-99-9999',
      maskType: 'invisible',
      byCharValidator: (input) => Validator.dateByChar(input, [masks.date]),
      validator: (input) => Validator.dateTime(input, [masks.date]),
      validationMessage: Validator.dateTimeMessage,
      required: true,
    },
    {
      type: 'text',
      name: 'birthDate',
      description: 'Birth date',
      placeholder: 'dd-mm-yyyy',
      value: birthDate && Validator.fromDateToMask(birthDate, masks.date),
      mask: '99-99-9999',
      maskType: 'invisible',
      byCharValidator: (input) => Validator.dateByChar(input, [masks.date]),
      validator: (input) => Validator.dateTimeInPast(input, [masks.date]),
      validationMessage: Validator.dateTimeMessage,
      required: true,
    },
    {
      type: 'select',
      name: 'direction',
      description: 'Direction',
      placeholder: 'Direction',
      value: direction,
      valueOptions: Object.values(Client.directions).map((directionName) => {
        return { label: directionName, value: directionName };
      }),
      required: true,
    },
    {
      type: 'text',
      name: 'education',
      description: 'Education',
      placeholder: 'Education',
      value: education,
      required: true,
    },
    {
      type: 'text',
      name: 'universityAverageScore',
      description: 'University average score',
      placeholder: '0.00',
      value: universityAverageScore,
      byCharValidator: Validator.numericByChar,
      validator: (input) => Validator.float(input, 5, 10),
      validationMessage: 'University average score must be real number from 5 to 10',
      required: true,
    },
    {
      type: 'text',
      name: 'mathScore',
      description: 'CT math score',
      placeholder: '000',
      value: mathScore,
      byCharValidator: Validator.numericByChar,
      validator: (input) => Validator.number(input, 20, 100),
      validationMessage: 'CT math score must be integer number from 20 to 100',
      required: true,
    },
  ];
}
